When would you want to use a remote repository rather than keeping all your work
local?

    It helps keeping your work in a remote repository so that you can view it anywhere and anytime if you just have an internet connection. You need not be dependent on your machine to work on those. Also, it helps other people who wants to view your work, review it and then edit it. GitHub is a great tool.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    There may be scenarios where I do not want to pull my changes to local, or there may be someone else who is working on my remote which I do not want on my local, etc. Also, if Git automatically tries to stay up-to-date with my remote, there may be merge issues which Git might not know how to resolve. A manual sync is always better than an automatic one.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are done when we are making a copy of the repository on the github server. The new repository is added to the github account but not in the local copy. We use this when we want to clone a repository for personal editing but we also want to link it to the original version. The main reason is because we do not have permissions to edit the original version.
    Clones are done when we are making a copy of the repository from the github to the local machine or it can be done locally on one machine from a git repository. We use this when we need to make a local copy of the repository for making local changes to the files.
    Branches are usually done on a single repository. It can be done on local as well as github repository. The main reason of branching is when we want to make changes seperate from the orginal version, so that after the changes we have the option to either discard the changes or merge the changes with the master branch.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    In the example shown, the last known state of the remote stored locally is referred by origin/master. The benefit of origin/master is that we can keep a track of how many commits have been done locally after the sync with github repo. Also, it will help when we push the local commits to github and pull the remote commits to local. This will also help us identify if there is a merge conflict so that we can resolve and keep the local copy up to date with the remote one.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    We can collaborate without using git or github by making pull requests. We can clone the repository, create a new branch and make some changes to it. Later we can push those changes to the github repo and then make a pull request to the owner of the repository. The owner can review the changes and can then decide if he/she wants to merge that changes to the master branch.
    Its always easy to create a pull requests using github than manually doing the updates and notifying the owner, which is harder.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
